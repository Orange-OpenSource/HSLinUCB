#!/usr/bin/python3

# Software Name : HSLinUCB
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: GPL-2.0
#
# This software is distributed under the GNU General Public License v2.0 license
#
# Author: David DELANDE <david.delande@orange.com> et al.

import time
import os
from urllib.request import Request, urlopen
import asyncio
from cgi import parse_qs
print('Content-type: text/plain') # the mime-type header.
print()
BackHostname = "back-dynamic-component-service.default.svc.cluster.local" if (os.environ.get("BACK_COMPONENT_HOSTNAME") == None) else os.environ.get("BACK_COMPONENT_HOSTNAME")
BackHostname2 = "back2-dynamic-component-service.default.svc.cluster.local" if (os.environ.get("BACK2_COMPONENT_HOSTNAME") == None) else os.environ.get("BACK2_COMPONENT_HOSTNAME")
ComponentName = "front" if (os.environ.get("COMPONENT_NAME") == None) else os.environ.get("COMPONENT_NAME")

def getForwardHeaders(environ):
    headers = {}
    if 'HTTP_X_REQUEST_ID' in environ:
        headers['x-request-id'] = environ['HTTP_X_REQUEST_ID']
    if 'HTTP_X_B3_TRACEID' in environ:
        headers['x-b3-traceid'] = environ['HTTP_X_B3_TRACEID']
    if 'HTTP_X_B3_SPANID' in environ:
        headers['x-b3-spanid'] = environ['HTTP_X_B3_SPANID']
    if 'HTTP_X_B3_PARENTSPANID' in environ:
        headers['x-b3-parentspanid'] = environ['HTTP_X_B3_PARENTSPANID']
    if 'HTTP_X_B3_SAMPLED' in environ:
        headers['x-b3-sampled'] = environ['HTTP_X_B3_SAMPLED']
    if 'HTTP_X_B3_FLAGS' in environ:
        headers['x-b3-flags'] = environ['HTTP_X_B3_FLAGS']
    if 'HTTP_X_OT_SPAN_CONTEXT' in environ:
        headers['x-ot-span-context'] = environ['HTTP_X_OT_SPAN_CONTEXT']
    if 'HTTP_USER_AGENT' in environ:
        headers['user-agent'] = environ['HTTP_USER_AGENT']
    return headers

start = time.time()
headers = {}
headers = getForwardHeaders(os.environ)
argument = parse_qs(os.environ['QUERY_STRING'])

url1 = "http://" + BackHostname + ":80/" + str(argument.get('path1',[''])[0])
url2 = "http://" + BackHostname2 + ":80/" + str(argument.get('path2',[''])[0])
 
#urls = ["http://" + i + ":80/" + str(argument.get('path',[''])[0]) for i in [BackHostname, BackHostname2]]
urls = [ url1 , url2 ] 
async def fetch(url):
    request = Request(url, headers=headers)
    response = await loop.run_in_executor(None, urlopen, request) 
    page = await loop.run_in_executor(None, response.read)
    return page
 
async def main():
    futures = [asyncio.ensure_future(fetch(url)) for url in urls]
    result = await asyncio.gather(*futures)      
    return result
 
loop = asyncio.get_event_loop()         
full_response = loop.run_until_complete(main())
loop.close()
print(full_response)
